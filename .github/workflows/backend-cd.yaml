name: back-end-cd

on:
  # Manual trigger
  workflow_dispatch:

  # Automatic trigger on pull request events targeting the main branch
  pull_request:
    types: [opened, synchronize, closed]
    branches: [ main, dev]
  
env:
  PYTHON_VERSION: '3.10'
  ECR_BACKEND_REPO: backend

jobs:
  install-lint:
    runs-on: ubuntu-latest
    environment: staging
    defaults:
      run:
        working-directory: ./starter/backend
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{env.PYTHON_VERSION}}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          starter/backend/.venv
        key: ${{ runner.os }}-pip-${{ hashFiles('starter/backend/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install --dev

    - name: Run Lint
      run: pipenv run lint 
      
    - name: Run Lint Fail
      run: pipenv run lint-fail
      continue-on-error: true

  install-test:
    runs-on: ubuntu-latest
    environment: staging
    defaults:
      run:
        working-directory: ./starter/backend
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{env.PYTHON_VERSION}}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          starter/backend/.venv
        key: ${{ runner.os }}-pip-${{ hashFiles('starter/backend/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install --dev

    - name: Test And Coverage
      run: |
        pipenv run test 
        pipenv run coverage

  deploy:
    name:  Deploy to AWS EKS Cluster
    environment: production
    needs: [install-lint, install-test]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/backend
    steps:
      - uses: actions/checkout@v3
  
      - name: Configure AWS Credentials for Deployment
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with: 
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_BACKEND_REPO }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPO:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_BACKEND_REPO:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Deploy to AWS EKS Cluster
        working-directory: ./starter/backend/k8s
        run: |
          kustomize edit set image backend=${{ steps.build-image.outputs.image }}
          kustomize build | kubectl apply -f -